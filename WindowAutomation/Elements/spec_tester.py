# Elements/spec_tester.py
# Phi√™n b·∫£n 5.0: Kh√¥i ph·ª•c v√† c·∫£i ti·∫øn log g·ª° l·ªói chi ti·∫øt cho t·ª´ng b·ªô l·ªçc.
# C√¥ng c·ª• g·ª° l·ªói (debugger) ƒë·ªôc l·∫≠p ƒë·ªÉ ki·ªÉm tra v√† tr·ª±c quan h√≥a c√°c b·ªô ch·ªçn.

import tkinter as tk
from tkinter import ttk, scrolledtext, font
import threading
import ast # ƒê·ªÉ ph√¢n t√≠ch chu·ªói th√†nh dictionary m·ªôt c√°ch an to√†n

try:
    from pywinauto import Desktop
    from pywinauto.findwindows import ElementNotFoundError
    import psutil
    import win32gui
    import win32process
    import win32con
    import re
    from datetime import datetime
except ImportError as e:
    print(f"L·ªói import th∆∞ vi·ªán, vui l√≤ng c√†i ƒë·∫∑t: {e}")
    print("G·ª£i √Ω: pip install pywinauto psutil")
    exit()

# ======================================================================
#                      ƒê·ªäNH NGHƒ®A C√ÅC THU·ªòC T√çNH (ƒê·∫ßy ƒë·ªß v√† r√µ nghƒ©a h∆°n)
# ======================================================================
PARAMETER_DEFINITIONS = {
    # PWA Properties
    "pwa_title": "T√™n/vƒÉn b·∫£n hi·ªÉn th·ªã c·ªßa element (quan tr·ªçng nh·∫•t).", "pwa_auto_id": "Automation ID, m·ªôt ID duy nh·∫•t ƒë·ªÉ x√°c ƒë·ªãnh element trong ·ª©ng d·ª•ng.",
    "pwa_control_type": "Lo·∫°i control c·ªßa element (v√≠ d·ª•: Button, Edit, Tree).", "pwa_class_name": "T√™n l·ªõp Win32 c·ªßa element (h·ªØu √≠ch cho c√°c app c≈©).",
    "pwa_framework_id": "Framework t·∫°o ra element (v√≠ d·ª•: UIA, Win32, WPF).", 
    # WIN32 Properties
    "win32_handle": "Handle (ID duy nh·∫•t) c·ªßa c·ª≠a s·ªï do Windows qu·∫£n l√Ω.",
    "win32_styles": "C√°c c·ªù ki·ªÉu d√°ng c·ªßa c·ª≠a s·ªï (d·∫°ng hexa).", "win32_extended_styles": "C√°c c·ªù ki·ªÉu d√°ng m·ªü r·ªông c·ªßa c·ª≠a s·ªï (d·∫°ng hexa).",
    # State Properties
    "state_is_visible": "Tr·∫°ng th√°i hi·ªÉn th·ªã (True n·∫øu ƒëang hi·ªÉn th·ªã).", "state_is_enabled": "Tr·∫°ng th√°i cho ph√©p t∆∞∆°ng t√°c (True n·∫øu ƒë∆∞·ª£c k√≠ch ho·∫°t).",
    "state_is_active": "Tr·∫°ng th√°i ho·∫°t ƒë·ªông (True n·∫øu l√† c·ª≠a s·ªï/element ƒëang ƒë∆∞·ª£c focus).", "state_is_minimized": "Tr·∫°ng th√°i thu nh·ªè (True n·∫øu c·ª≠a s·ªï ƒëang b·ªã thu nh·ªè).",
    "state_is_maximized": "Tr·∫°ng th√°i ph√≥ng to (True n·∫øu c·ª≠a s·ªï ƒëang ƒë∆∞·ª£c ph√≥ng to).", "state_is_focusable": "Tr·∫°ng th√°i c√≥ th·ªÉ nh·∫≠n focus b√†n ph√≠m.",
    "state_is_password": "Tr·∫°ng th√°i l√† √¥ nh·∫≠p m·∫≠t kh·∫©u.", "state_is_offscreen": "Tr·∫°ng th√°i n·∫±m ngo√†i m√†n h√¨nh hi·ªÉn th·ªã.",
    "state_is_content_element": "L√† element ch·ª©a n·ªôi dung ch√≠nh, kh√¥ng ph·∫£i control trang tr√≠.", "state_is_control_element": "L√† element c√≥ th·ªÉ t∆∞∆°ng t√°c (ng∆∞·ª£c v·ªõi content).",
    # Geometry Properties
    "geo_rectangle_tuple": "Tuple t·ªça ƒë·ªô (Left, Top, Right, Bottom) c·ªßa c·ª≠a s·ªï.", "geo_bounding_rect_tuple": "Tuple t·ªça ƒë·ªô (Left, Top, Right, Bottom) c·ªßa element.",
    "geo_center_point": "T·ªça ƒë·ªô ƒëi·ªÉm trung t√¢m c·ªßa element.", 
    # Process Properties
    "proc_pid": "Process ID (ID c·ªßa ti·∫øn tr√¨nh s·ªü h·ªØu c·ª≠a s·ªï).",
    "proc_thread_id": "Thread ID (ID c·ªßa lu·ªìng s·ªü h·ªØu c·ª≠a s·ªï).", "proc_name": "T√™n c·ªßa ti·∫øn tr√¨nh (v√≠ d·ª•: 'notepad.exe').",
    "proc_path": "ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file th·ª±c thi c·ªßa ti·∫øn tr√¨nh.", "proc_cmdline": "D√≤ng l·ªánh ƒë√£ d√πng ƒë·ªÉ kh·ªüi ch·∫°y ti·∫øn tr√¨nh.",
    "proc_create_time": "Th·ªùi gian ti·∫øn tr√¨nh ƒë∆∞·ª£c t·∫°o (d·∫°ng timestamp ho·∫∑c chu·ªói).", "proc_username": "T√™n ng∆∞·ªùi d√πng ƒë√£ kh·ªüi ch·∫°y ti·∫øn tr√¨nh.",
    # Relational Properties
    "rel_level": "C·∫•p ƒë·ªô s√¢u c·ªßa element trong c√¢y giao di·ªán (0 l√† root).", "rel_parent_handle": "Handle c·ªßa c·ª≠a s·ªï cha (n·∫øu c√≥, 0 l√† Desktop).",
    "rel_parent_title": "T√™n/ti√™u ƒë·ªÅ c·ªßa element cha.", "rel_labeled_by": "T√™n c·ªßa element nh√£n (label) li√™n k·∫øt v·ªõi element n√†y.",
    "rel_child_count": "S·ªë l∆∞·ª£ng element con tr·ª±c ti·∫øp.", 
    # UIA Pattern Properties
    "uia_value": "Gi√° tr·ªã c·ªßa element n·∫øu h·ªó tr·ª£ ValuePattern.", 
    "uia_toggle_state": "Tr·∫°ng th√°i c·ªßa element n·∫øu h·ªó tr·ª£ TogglePattern (On, Off, Indeterminate).",
    # Sorting / Selector Keys
    "sort_by_creation_time": "S·∫Øp x·∫øp theo th·ªùi gian t·∫°o. D√πng s·ªë d∆∞∆°ng (1, 2,...) cho c≈© nh·∫•t, s·ªë √¢m (-1, -2,...) cho m·ªõi nh·∫•t.",
    "sort_by_title_length": "S·∫Øp x·∫øp theo ƒë·ªô d√†i ti√™u ƒë·ªÅ. D√πng s·ªë d∆∞∆°ng (1, 2,...) cho ng·∫Øn nh·∫•t, s·ªë √¢m (-1, -2,...) cho d√†i nh·∫•t.",
    "sort_by_child_count": "S·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng element con. D√πng s·ªë d∆∞∆°ng (1, 2,...) cho √≠t con nh·∫•t, s·ªë √¢m (-1, -2,...) cho nhi·ªÅu con nh·∫•t.",
    "sort_by_y_pos": "S·∫Øp x·∫øp theo v·ªã tr√≠ tr·ª•c Y (t·ª´ tr√™n xu·ªëng). D√πng s·ªë d∆∞∆°ng (1, 2,...) cho ƒë·ªëi t∆∞·ª£ng ·ªü tr√™n c√πng.",
    "sort_by_x_pos": "S·∫Øp x·∫øp theo v·ªã tr√≠ tr·ª•c X (t·ª´ tr√°i sang). D√πng s·ªë d∆∞∆°ng (1, 2,...) cho ƒë·ªëi t∆∞·ª£ng b√™n tr√°i nh·∫•t.",
    "sort_by_width": "S·∫Øp x·∫øp theo chi·ªÅu r·ªông. D√πng s·ªë d∆∞∆°ng (1, 2,...) cho h·∫πp nh·∫•t, s·ªë √¢m (-1, -2,...) cho r·ªông nh·∫•t.",
    "sort_by_height": "S·∫Øp x·∫øp theo chi·ªÅu cao. D√πng s·ªë d∆∞∆°ng (1, 2,...) cho th·∫•p nh·∫•t, s·ªë √¢m (-1, -2,...) cho cao nh·∫•t.",
    "z_order_index": "Ch·ªçn ƒë·ªëi t∆∞·ª£ng theo th·ª© t·ª± Z (ƒë·ªô s√¢u). Hi·∫øm d√πng. Gi√° tr·ªã l√† index (0, 1, ...).",
}

# ======================================================================
#                      L·ªöP CH√çNH C·ª¶A ·ª®NG D·ª§NG
# ======================================================================
class SpecTesterApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Selector Debugger v5.0")
        self.geometry("850x750")

        style = ttk.Style(self)
        style.theme_use('clam')
        style.configure("TLabel", font=('Segoe UI', 10))
        style.configure("TButton", font=('Segoe UI', 10, 'bold'), padding=5)
        style.configure("TLabelframe.Label", font=('Segoe UI', 11, 'bold'))
        style.configure("Treeview.Heading", font=('Segoe UI', 10, 'bold'))

        self.highlighter = None
        self.test_thread = None
        self.debugger = SelectorDebugger(self.log_message)
        
        self.create_widgets()

    def create_widgets(self):
        notebook = ttk.Notebook(self)
        notebook.pack(fill="both", expand=True, padx=10, pady=10)
        debugger_tab, properties_tab = ttk.Frame(notebook), ttk.Frame(notebook)
        notebook.add(debugger_tab, text="Debugger"); notebook.add(properties_tab, text="Thu·ªôc t√≠nh h·ªó tr·ª£")
        self.create_debugger_tab(debugger_tab); self.create_properties_tab(properties_tab)

    def create_debugger_tab(self, parent):
        parent.rowconfigure(2, weight=1); parent.columnconfigure(0, weight=1)
        input_frame = ttk.Frame(parent); input_frame.grid(row=0, column=0, sticky="ew", pady=5); input_frame.columnconfigure(1, weight=1)
        ttk.Label(input_frame, text="Window Spec:").grid(row=0, column=0, sticky="nw", padx=5)
        self.window_spec_text = tk.Text(input_frame, height=5, font=("Courier New", 10)); self.window_spec_text.grid(row=0, column=1, sticky="ew")
        self.window_spec_text.insert("1.0", "{'pwa_class_name': 'Notepad', 'sort_by_creation_time': -1}")
        ttk.Label(input_frame, text="Element Spec:").grid(row=1, column=0, sticky="nw", padx=5, pady=5)
        self.element_spec_text = tk.Text(input_frame, height=5, font=("Courier New", 10)); self.element_spec_text.grid(row=1, column=1, sticky="ew", pady=5)
        self.element_spec_text.insert("1.0", "{'pwa_control_type': 'Document'}")
        button_frame = ttk.Frame(parent); button_frame.grid(row=1, column=0, pady=10)
        self.run_button = ttk.Button(button_frame, text="üîé Ch·∫°y g·ª° l·ªói (Debug)", command=self.run_test); self.run_button.pack(side="left", padx=10)
        self.clear_button = ttk.Button(button_frame, text="‚ú® X√≥a Log", command=self.clear_log); self.clear_button.pack(side="left", padx=10)
        log_frame = ttk.LabelFrame(parent, text="B√°o c√°o chi ti·∫øt"); log_frame.grid(row=2, column=0, sticky="nsew"); log_frame.rowconfigure(0, weight=1); log_frame.columnconfigure(0, weight=1)
        self.log_area = scrolledtext.ScrolledText(log_frame, wrap="word", font=("Consolas", 10), state="disabled", bg="#2B2B2B"); self.log_area.pack(fill="both", expand=True, padx=5, pady=5)
        self.log_area.tag_config('INFO', foreground='#87CEEB'); self.log_area.tag_config('DEBUG', foreground='#D3D3D3')
        self.log_area.tag_config('FILTER', foreground='#FFD700'); self.log_area.tag_config('SUCCESS', foreground='#90EE90')
        self.log_area.tag_config('ERROR', foreground='#F08080'); self.log_area.tag_config('HEADER', foreground='#FFFFFF', font=("Consolas", 11, "bold", "underline"))

    def create_properties_tab(self, parent):
        tree_frame = ttk.Frame(parent, padding=10); tree_frame.pack(fill="both", expand=True)
        tree = ttk.Treeview(tree_frame, columns=("Property", "Description"), show="headings"); tree.heading("Property", text="T√™n thu·ªôc t√≠nh"); tree.heading("Description", text="√ù nghƒ©a")
        tree.column("Property", width=250, anchor='w'); tree.column("Description", width=500, anchor='w')
        categories = {
            "L·ªçc (Filter) - PWA": self.debugger.PWA_PROPS, "L·ªçc (Filter) - WIN32": self.debugger.WIN32_PROPS, "L·ªçc (Filter) - State": self.debugger.STATE_PROPS, "L·ªçc (Filter) - Geometry": self.debugger.GEO_PROPS,
            "L·ªçc (Filter) - Process": self.debugger.PROC_PROPS, "L·ªçc (Filter) - Relational": self.debugger.REL_PROPS, "L·ªçc (Filter) - UIA Patterns": self.debugger.UIA_PROPS, 
            "S·∫Øp x·∫øp & L·ª±a ch·ªçn (Selectors)": self.debugger.SORTING_KEYS,
        }
        for category_name, prop_set in categories.items():
            category_id = tree.insert("", "end", values=(f"--- {category_name} ---", ""), tags=('category',))
            for prop in sorted(list(prop_set)):
                tree.insert(category_id, "end", values=(prop, PARAMETER_DEFINITIONS.get(prop, "")))
        tree.tag_configure('category', background='#3E4145', font=('Segoe UI', 10, 'bold')); tree.pack(fill="both", expand=True)

    def log_message(self, level, message):
        self.log_area.config(state="normal"); self.log_area.insert(tk.END, f"[{level}] {message}\n", level); self.log_area.config(state="disabled"); self.log_area.see(tk.END)
    def clear_log(self):
        self.log_area.config(state="normal"); self.log_area.delete("1.0", tk.END); self.log_area.config(state="disabled")

    def run_test(self):
        self.clear_log(); self.run_button.config(state="disabled")
        try:
            win_spec = ast.literal_eval(self.window_spec_text.get("1.0", "end-1c") or '{}')
            elem_spec = ast.literal_eval(self.element_spec_text.get("1.0", "end-1c") or '{}')
            if not isinstance(win_spec, dict) or not isinstance(elem_spec, dict): raise ValueError("Spec ph·∫£i l√† dictionary.")
        except (ValueError, SyntaxError) as e:
            self.log_message('ERROR', f"L·ªói c√∫ ph√°p trong spec: {e}"); self.run_button.config(state="normal"); return
        self.test_thread = threading.Thread(target=self.debugger.run_debug_session, args=(win_spec, elem_spec, self.on_test_complete), daemon=True); self.test_thread.start()

    def on_test_complete(self, result_element):
        self.run_button.config(state="normal");
        if result_element: self.highlight_element(result_element)

    def highlight_element(self, element):
        if self.highlighter: self.highlighter.destroy()
        rect = element.rectangle(); self.highlighter = tk.Toplevel(self); self.highlighter.overrideredirect(True)
        self.highlighter.wm_attributes("-topmost", True, "-disabled", True, "-transparentcolor", "white")
        self.highlighter.geometry(f'{rect.width()}x{rect.height()}+{rect.left}+{rect.top}')
        canvas = tk.Canvas(self.highlighter, bg='white', highlightthickness=0); canvas.pack(fill=tk.BOTH, expand=True)
        canvas.create_rectangle(2, 2, rect.width()-2, rect.height()-2, outline="red", width=4); self.highlighter.after(2500, self.highlighter.destroy)

# ======================================================================
#                      L·ªöP LOGIC G·ª† L·ªñI (N√¢ng c·∫•p)
# ======================================================================
class SelectorDebugger:
    def __init__(self, log_callback):
        self.log = log_callback; self.desktop = Desktop(backend='uia'); self._proc_info_cache = {}

    PWA_PROPS = {"pwa_title", "pwa_auto_id", "pwa_control_type", "pwa_class_name", "pwa_framework_id"}
    WIN32_PROPS = {"win32_handle", "win32_styles", "win32_extended_styles"}
    STATE_PROPS = {"state_is_visible", "state_is_enabled", "state_is_active", "state_is_minimized", "state_is_maximized", "state_is_focusable", "state_is_password", "state_is_offscreen", "state_is_content_element", "state_is_control_element"}
    GEO_PROPS = {"geo_rectangle_tuple", "geo_bounding_rect_tuple", "geo_center_point"}
    PROC_PROPS = {"proc_pid", "proc_thread_id", "proc_name", "proc_path", "proc_cmdline", "proc_create_time", "proc_username"}
    REL_PROPS = {"rel_level", "rel_parent_handle", "rel_parent_title", "rel_labeled_by", "rel_child_count"}
    UIA_PROPS = {"uia_value", "uia_toggle_state"}
    SUPPORTED_KEYS = PWA_PROPS | WIN32_PROPS | STATE_PROPS | GEO_PROPS | PROC_PROPS | REL_PROPS | UIA_PROPS
    SORTING_KEYS = {'sort_by_creation_time', 'sort_by_title_length', 'sort_by_child_count', 'sort_by_y_pos', 'sort_by_x_pos', 'sort_by_width', 'sort_by_height', 'z_order_index'}
    STRING_OPERATORS = {'equals', 'iequals', 'contains', 'icontains', 'in', 'regex', 'not_equals', 'not_iequals', 'not_contains', 'not_icontains'}
    NUMERIC_OPERATORS = {'>', '>=', '<', '<='}; VALID_OPERATORS = STRING_OPERATORS.union(NUMERIC_OPERATORS)

    def run_debug_session(self, window_spec, element_spec, on_complete_callback):
        self.log('HEADER', "--- B·∫ÆT ƒê·∫¶U PHI√äN G·ª† L·ªñI ---"); found_element = None
        try:
            target_window = self._debug_find_one(self.desktop.windows, window_spec, "C·ª≠a s·ªï")
            if target_window and element_spec: found_element = self._debug_find_one(target_window.descendants, element_spec, "Element")
            elif target_window: found_element = target_window
        except Exception as e: self.log('ERROR', f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")
        self.log('HEADER', "--- K·∫æT TH√öC PHI√äN G·ª† L·ªñI ---"); on_complete_callback(found_element)

    def _debug_find_one(self, search_func, spec, search_type):
        self.log('INFO', f"B·∫Øt ƒë·∫ßu t√¨m ki·∫øm ƒë·ªëi t∆∞·ª£ng: '{search_type}'"); candidates = search_func()
        self.log('DEBUG', f"T√¨m th·∫•y t·ªïng c·ªông {len(candidates)} ·ª©ng vi√™n '{search_type}' ban ƒë·∫ßu.")
        if not candidates: self.log('ERROR', f"Kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ ·ª©ng vi√™n '{search_type}' n√†o."); return None
        filter_spec = {k: v for k, v in spec.items() if k not in self.SORTING_KEYS}; selector_spec = {k: v for k, v in spec.items() if k in self.SORTING_KEYS}
        if filter_spec:
            self.log('INFO', f"√Åp d·ª•ng b·ªô l·ªçc (filters) cho {len(candidates)} ·ª©ng vi√™n..."); candidates = self._apply_filters_debug(candidates, filter_spec)
            if not candidates: self.log('ERROR', f"Kh√¥ng c√≤n ·ª©ng vi√™n n√†o sau khi l·ªçc."); return None
            self.log('SUCCESS', f"C√≤n l·∫°i {len(candidates)} ·ª©ng vi√™n sau khi l·ªçc.")
        if selector_spec:
            self.log('INFO', f"√Åp d·ª•ng b·ªô ch·ªçn (selectors) cho {len(candidates)} ·ª©ng vi√™n..."); candidates = self._apply_selectors_debug(candidates, selector_spec)
            if not candidates: self.log('ERROR', f"Kh√¥ng c√≤n ·ª©ng vi√™n n√†o sau khi ch·ªçn."); return None
        if len(candidates) == 1: self.log('SUCCESS', f"T√¨m th·∫•y ƒê√öNG 1 ƒë·ªëi t∆∞·ª£ng '{search_type}'!"); self._log_element_details(candidates[0]); return candidates[0]
        elif len(candidates) > 1: self.log('ERROR', f"T√¨m th·∫•y {len(candidates)} ƒë·ªëi t∆∞·ª£ng kh√¥ng r√µ r√†ng."); [self.log('DEBUG', f"  #{i+1}: '{e.window_text()}'") for i, e in enumerate(candidates[:5])]
        else: self.log('ERROR', f"Kh√¥ng t√¨m th·∫•y ƒë·ªëi t∆∞·ª£ng '{search_type}' n√†o ph√π h·ª£p.")
        return None

    def _apply_filters_debug(self, elements, spec):
        current_elements = list(elements)
        for key, criteria in spec.items():
            self.log('FILTER', f"L·ªçc theo: {{'{key}': {repr(criteria)}}}")
            
            initial_count = len(current_elements)
            kept_elements = []
            log_limit = 50 
            logged_count = 0

            for elem in current_elements:
                actual_value = self._get_actual_value(elem, key)
                matches = self._check_condition(actual_value, criteria)
                
                if logged_count < log_limit:
                    status = "[GI·ªÆ L·∫†I]" if matches else "[LO·∫†I B·ªé]"
                    reason = "kh·ªõp" if matches else "kh√¥ng kh·ªõp"
                    self.log('DEBUG', f"  {status} '{elem.window_text()}' v√¨ '{key}' c√≥ gi√° tr·ªã '{actual_value}' {reason}.")
                    logged_count += 1
                
                if matches:
                    kept_elements.append(elem)

            if logged_count >= log_limit and initial_count > log_limit:
                 self.log('DEBUG', f"  ... v√† {initial_count - log_limit} ·ª©ng vi√™n kh√°c ƒë∆∞·ª£c x·ª≠ l√Ω (log chi ti·∫øt ƒë√£ ƒë∆∞·ª£c gi·ªõi h·∫°n).")

            self.log('INFO', f"  -> K·∫øt qu·∫£: Gi·ªØ l·∫°i {len(kept_elements)}/{initial_count} ·ª©ng vi√™n.")
            
            if not kept_elements:
                self.log('ERROR', f"B·ªô l·ªçc n√†y ƒë√£ lo·∫°i b·ªè t·∫•t c·∫£ ·ª©ng vi√™n.");
                return []
            
            current_elements = kept_elements
        return current_elements

    def _apply_selectors_debug(self, candidates, selectors):
        sorted_candidates = list(candidates)
        for key, index in selectors.items():
            if key == 'z_order_index': continue
            self.log('FILTER', f"S·∫Øp x·∫øp theo: '{key}' (Th·ª© t·ª±: {'Gi·∫£m d·∫ßn' if index < 0 else 'TƒÉng d·∫ßn'})")
            sort_key_func = self._get_sort_key_function(key)
            if sort_key_func: sorted_candidates.sort(key=sort_key_func, reverse=(index < 0))
        final_index = selectors.get('z_order_index', list(selectors.values())[-1] if selectors else 0)
        if final_index > 0: final_index -= 1
        self.log('FILTER', f"Ch·ªçn ph·∫ßn t·ª≠ t·∫°i index: {final_index}")
        try: return [sorted_candidates[final_index]]
        except IndexError: self.log('ERROR', f"Index={final_index} n·∫±m ngo√†i ph·∫°m vi."); return []
            
    def _log_element_details(self, element):
        self.log('DEBUG', "--- Chi ti·∫øt ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c t√¨m th·∫•y ---")
        for prop in sorted(list(self.SUPPORTED_KEYS)):
            val = self._get_actual_value(element, prop)
            if val or isinstance(val, (bool, int)): self.log('DEBUG', f"  - {prop}: {val}")
        self.log('DEBUG', "------------------------------------")

    def _get_process_info(self, pid):
        if pid in self._proc_info_cache: return self._proc_info_cache[pid]
        if pid > 0:
            try:
                p = psutil.Process(pid); info = {'proc_name': p.name(), 'proc_path': p.exe(), 'proc_cmdline': ' '.join(p.cmdline()), 'proc_create_time': datetime.fromtimestamp(p.create_time()), 'proc_username': p.username()}; self._proc_info_cache[pid] = info; return info
            except (psutil.NoSuchProcess, psutil.AccessDenied): pass
        return {}

    def _get_actual_value(self, element, key):
        prop = key.lower()
        try:
            if prop in self.PWA_PROPS:
                if prop == 'pwa_title': return element.window_text()
                if prop == 'pwa_class_name': return element.class_name()
                if prop == 'pwa_auto_id': return element.automation_id()
                if prop == 'pwa_control_type': return element.control_type
                if prop == 'pwa_framework_id': return element.framework_id()
            if prop in self.WIN32_PROPS:
                handle = element.handle
                if not handle: return None
                if prop == 'win32_handle': return handle
                if prop == 'win32_styles': return win32gui.GetWindowLong(handle, win32con.GWL_STYLE)
                if prop == 'win32_extended_styles': return win32gui.GetWindowLong(handle, win32con.GWL_EXSTYLE)
            if prop in self.STATE_PROPS:
                if prop == 'state_is_visible': return element.is_visible()
                if prop == 'state_is_enabled': return element.is_enabled()
                if prop == 'state_is_active': return element.is_active()
                if prop == 'state_is_minimized': return element.is_minimized()
                if prop == 'state_is_maximized': return element.is_maximized()
                if prop == 'state_is_focusable': return element.is_focusable()
                if prop == 'state_is_password': return element.is_password()
                if prop == 'state_is_offscreen': return element.is_offscreen()
                if prop == 'state_is_content_element': return element.is_content_element()
                if prop == 'state_is_control_element': return element.is_control_element()
            if prop in self.GEO_PROPS:
                rect = element.rectangle();
                if prop == 'geo_bounding_rect_tuple': return (rect.left, rect.top, rect.right, rect.bottom)
                if prop == 'geo_center_point': return rect.mid_point()
            if prop in self.PROC_PROPS:
                pid = element.process_id()
                if prop == 'proc_pid': return pid
                if prop == 'proc_thread_id': return win32process.GetWindowThreadProcessId(element.handle)[0] if element.handle else None
                proc_info = self._get_process_info(pid); return proc_info.get(prop.replace('proc_',''))
            if prop in self.REL_PROPS:
                if prop == 'rel_child_count': return len(element.children())
                if prop == 'rel_parent_handle': return win32gui.GetParent(element.handle) if element.handle else None
                if prop == 'rel_parent_title': return element.parent().window_text() if element.parent() else ''
                if prop == 'rel_labeled_by': return element.labeled_by() if hasattr(element, 'labeled_by') else ''
                if prop == 'rel_level':
                    level = 0; current = element
                    while current.parent(): level += 1; current = current.parent()
                    return level
            if prop in self.UIA_PROPS:
                if prop == 'uia_value': return element.get_value() if element.has_value() else None
                if prop == 'uia_toggle_state': return element.get_toggle_state() if element.has_toggle() else None
            if key in ['sort_by_y_pos', 'sort_by_x_pos', 'sort_by_width', 'sort_by_height']:
                rect = element.rectangle();
                if not rect: return 0
                if key == 'sort_by_y_pos': return rect.top
                if key == 'sort_by_x_pos': return rect.left
                if key == 'sort_by_width': return rect.width()
                if key == 'sort_by_height': return rect.height()
            return None
        except Exception: return None

    def _check_condition(self, actual_value, criteria):
        if not isinstance(criteria, tuple): return actual_value == criteria
        if len(criteria) != 2: return False
        op, target = str(criteria[0]).lower(), criteria[1]
        if op not in self.VALID_OPERATORS or actual_value is None: return False
        str_actual = str(actual_value)
        if op in self.STRING_OPERATORS:
            if op == 'equals': return str_actual == target
            if op == 'iequals': return str_actual.lower() == str(target).lower()
            if op == 'contains': return str(target) in str_actual
            if op == 'icontains': return str(target).lower() in str_actual.lower()
            if op == 'regex': return re.search(str(target), str_actual) is not None
        if op in self.NUMERIC_OPERATORS:
            try:
                num_actual, num_target = float(actual_value), float(target)
                if op == '>': return num_actual > num_target
                if op == '>=': return num_actual >= num_target
                if op == '<': return num_actual < num_target
                if op == '<=': return num_actual <= num_target
            except (ValueError, TypeError): return False
        return False

    def _get_sort_key_function(self, key):
        if key == 'sort_by_creation_time': return lambda e: self._get_actual_value(e, 'proc_create_time') or datetime.min
        if key == 'sort_by_title_length': return lambda e: len(self._get_actual_value(e, 'pwa_title') or '')
        if key == 'sort_by_child_count': return lambda e: self._get_actual_value(e, 'rel_child_count') or 0
        if key in ['sort_by_y_pos', 'sort_by_x_pos', 'sort_by_width', 'sort_by_height']: return lambda e: self._get_actual_value(e, key) or 0
        return None

if __name__ == "__main__":
    app = SpecTesterApp()
    app.mainloop()
